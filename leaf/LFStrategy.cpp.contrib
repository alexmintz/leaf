/*
*
*	© Copyright 2011 by TAF Co. All rights reserved.
*
*/

#include "leaf/LFStrategy.h"
#include "leaf/LFRunSettings.h"
#include "znet/TCIdGenerator.h"
#include "leaf/Version.h"
#include <sstream>
#include <cmath>
#include <iomanip>

//======================================================================
void LF::backup_all_bmts(BMTS_BackupMap& b_map_)
{
	BMTS_Properties* b = BMTS<LFDepthData>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFTradeData>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFStrategyData>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFNewOrder>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFCancelOrder>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFOrderUpdate>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFOrderFill>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFPositionData>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFStrategyRequest>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFRunStats>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFRunEvent>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFTradeStats>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFSlope>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFCluster>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFTeaser>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFMatch>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFPeak>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFBox>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFDataPoint>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
	b = BMTS<LFEntry>::instance();
	b_map_[b->_event_type_name] = BMTS_BackupPtr(new BMTS_Backup(b));
}

//======================================================================
//======================================================================
LFStrategy::LFStrategy(	const std::string&	leader_,
						const std::string&	follower_,
						LFRunEvent*			run_event_)
:
//BMStrategy(Z::make_callback(this, &LFStrategy::run)),
BMStrategy(0),
_leader(leader_),
_follower(follower_),
_key(Z::get_setting("LFStrategy:strategy_id")),
_run_event(run_event_),
_leader_on(false),
_rerun(false),
_cut_loss(0),
_take_profit_ticks(0),
_strong_qty(0),
_position_limit(0)
{
	set_name(_key);
	_s._strategy_key = _key;
	/*if(_run_event)
		(_run_event->_run_data).set();
	*/
	Z::report_info("LFStrategy %s -- Constructed", get_name().c_str());

}
//======================================================================
LFStrategy::~LFStrategy()
{
}
//======================================================================
int LFStrategy::open()
{
	long hwm = 0;
	long lwm = 0;
	if(!BMModel::instance()->is_live())
	{
		hwm = Z::get_setting_integer("LFStrategy:hwm", 1);
		lwm = Z::get_setting_integer("LFStrategy:lwm", 0);
	}
	else
	{
		hwm = 100;
		lwm = 99;
	}
	_leader_on = Z::get_setting_bool("LFStrategy:leader:on", false);
	_rerun = (RunSettings::instance()->get_rerun_live() || RunSettings::instance()->get_rerun_backtest());
	if (_leader_on)
	{
		subscribe_input(this, &LFStrategy::process_l_depth, _leader, "md_in", false, hwm, lwm);
		subscribe_input(this, &LFStrategy::process_l_trade, _leader, "md_in", false, hwm, lwm);
	}
	subscribe_input(this, &LFStrategy::process_f_depth, _follower, "md_in", false, hwm, lwm);
	subscribe_input(this, &LFStrategy::process_f_trade, _follower, "md_in", false, hwm, lwm);
	subscribe_input(this, &LFStrategy::process_request, _key, "request", true);

	subscribe_change_run(Z::make_callback(this, &LFStrategy::change_run));
	if (!BMModel::instance()->is_live())
		subscribe_inputs_inactive(Z::make_callback(this, &LFStrategy::process_inputs_inactive));

	_pos.reset(new LFPosition(_follower, Z::get_setting_integer("LFStrategy:strategy_id"), *this));
	return BMStrategy::open();
}
//======================================================================
void LFStrategy::thr_close()
{
	report_run();
	_pos.reset();
	unsubscribe_inputs_inactive();
	unsubscribe_change_run();
	//if (_leader_on)
	//{
	//	unsubscribe_input<LFDepthData>("l_md");
	//	unsubscribe_input<LFTradeData>("l_md");
	//}
	unsubscribe_input<LFDepthData>("md_in");
	unsubscribe_input<LFTradeData>("md_in");
	unsubscribe_input<LFStrategyRequest>("request");
	BMStrategy::thr_close();

}
//======================================================================
bool LFStrategy::process_inputs_inactive()
{
	Z::report_debug("---LFStrategy::process_inputs_inactive");
	auto_ptr<LFStrategyData> s(new LFStrategyData(_s));
	s->_t = ACE_Time_Value();
	BMModel::instance()->send(s.release());
	return true;

}
//======================================================================
bool LFStrategy::change_run()
{
	_s.reset();
	BMTT_Shift::instance()->reset();
	_take_profit_ticks= Z::get_setting_double("LFModel:take_profit_ticks", 11111.);
	_s._cur_profit_ticks = _take_profit_ticks;
	_strong_qty= Z::get_setting_double("LFModel:strong_qty", 30);
	_strong_qty_set = tc_vector<double>(Z::get_setting("LFModel:strong_qty_set", "30"));

	_cut_loss= Z::get_setting_double("LFModel:cut_loss", 0.);
	_position_limit= Z::get_setting_double("LFModel:position_limit", 250);

	std::string type = Z::get_setting("LFModel:1:type", "chande");
	long intervals = Z::get_setting_integer("LFModel:1:intervals", 7);
	tc_vector<long> dt(Z::get_setting("LFModel:1:bar_msec", "5000,3000"), ',');
	long step_dt = Z::get_setting_integer("LFModel:1:step_msec", 500);

	tc_vector<long> dt_eng(Z::get_setting("LFModel:1:eng:bar_msec", "5000"), ',');
	long step_dt_eng = Z::get_setting_integer("LFModel:1:eng:step_msec", 500);

	bool average_current_bar = false;
	bool use_average_price = true;

	_s._l_1.load_and_reset();
	_s._f_1.load_and_reset();

//--> Signals Factory
	_signals.clear();
	_trading_signal.reset();

	LFSignalPtr sptr;
	// HighLow leader
	sptr.reset(new LFSignal_HighLow(*this, _s._l_1, 0));
	if(sptr->is_configured_on())
		_signals.push_back(sptr);
	// HighLow follower
	sptr.reset(new LFSignal_HighLow(*this, _s._f_1, &_s._l_1));
	if(sptr->is_configured_on())
		_signals.push_back(sptr);
	if(sptr->is_trading_on())
		_trading_signal = sptr;

	//<-- Signals Factory

	tc_str_tolower(type);

	if(tc_compare_no_space(type.c_str(), "trix"))
	{
		if(dt.size() == 1)
		{
			_s._l_1._lf_m.reset(new LFSmoothModel<LFM_Trix>("l1", intervals, dt[0], step_dt, average_current_bar, use_average_price));
			_s._f_1._lf_m.reset(new LFSmoothModel<LFM_Trix>("f1", intervals, dt[0], step_dt, average_current_bar, use_average_price));
		}
		else
		{
			_s._l_1._lf_m.reset(new LFAvgModel<LFM_Trix>("l1", intervals, dt, average_current_bar, use_average_price));
			_s._f_1._lf_m.reset(new LFAvgModel<LFM_Trix>("f1", intervals, dt, average_current_bar, use_average_price));
		}

	}
	else if(tc_compare_no_space(type.c_str(), "chande"))
	{
		if(dt.size() == 1)
		{
			_s._l_1._lf_m.reset(new LFSmoothModel<LFM_Chande>("l1", intervals, dt[0], step_dt, average_current_bar, use_average_price));
			_s._f_1._lf_m.reset(new LFSmoothModel<LFM_Chande>("f1", intervals, dt[0], step_dt, average_current_bar, use_average_price));
		}
		else
		{
			_s._l_1._lf_m.reset(new LFAvgModel<LFM_Chande>("l1", intervals, dt, average_current_bar, use_average_price));
			_s._f_1._lf_m.reset(new LFAvgModel<LFM_Chande>("f1", intervals, dt, average_current_bar, use_average_price));
		}

	}
	else
		z_throw("LFStrategy::change_run -- unknown model type");

	if (dt_eng.size() == 1)
	{
		if (dt_eng[0] > 0)
		{
			_s._l_1._lf_eng.reset(new LFSmoothModel<LFM_Integral>("l_eng", 1, dt_eng[0], step_dt_eng, true, true));
			_s._f_1._lf_eng.reset(new LFSmoothModel<LFM_Integral>("f_eng", 1, dt_eng[0], step_dt_eng, true, true));
		}
	}
	else
	{
		_s._l_1._lf_eng.reset(new LFAvgModel<LFM_Integral>("l_eng", 1, dt_eng, true, true));
		_s._f_1._lf_eng.reset(new LFAvgModel<LFM_Integral>("f_eng", 1, dt_eng, true, true));
	}

	if (RunSettings::instance()->get_live_run())
	{
		_no_new_after = TCTime();
		_no_new_before = TCTime();

		TCTime endofday_t(Z::get_setting("LFStrategy:endofday", "17:00:00"));
		TCDateTime dt = TCDateTime::now();
		TCDate date = dt.get_date();
		if(dt.get_time() > endofday_t)
			date = tc_b_date->next_business_date(dt.get_date());
		_position_file = Z::get_setting("BMTS:dir", "");
		if(_position_file.length() > 0)
		{
			std::string fname = "/" + date.as_string() + "_Position.cfg";
			_position_file += fname;
		}

		restore_position();
		_pos->reset(Z::get_setting_double("LFPosition:open_p", 0.),
					Z::get_setting_double("LFPosition:open_q", 0.),
					Z::get_setting_double("LFPosition:realized_pnl", 0.));

		if (!RunSettings::instance()->get_live_backtest())
		{
			TCTime susp_t(Z::get_setting("LFStrategy:suspend_at", ""));
			if(susp_t.as_hms() != 0)
			{
				TCDateTime susp_dt = TCDateTime(date, susp_t);
				_suspend_at = susp_dt.get_ace_time();
				Z::report_info("%s -- Will Suspend at %s ", get_name().c_str(), susp_dt.as_string().c_str());
			}
		}
	}
	else
	{
		_position_file = Z::get_setting("LFStrategy:position_file", "");
		_pos->reset();
		_no_new_after = TCTime(Z::get_setting("LFModel:no_new_after", ""));
		if(_no_new_after.as_hms() != 0)
			Z::report_info("%s -- No new position after %s ", get_name().c_str(), _no_new_after.as_string().c_str());
		_no_new_before = TCTime(Z::get_setting("LFModel:no_new_before", ""));
		if(_no_new_before.as_hms() != 0)
			Z::report_info("%s -- No new position before %s ", get_name().c_str(), _no_new_before.as_string().c_str());

	}
	save_position();
	_last_pd.reset();
	_pos->data()._t = _input_time;
	if (RunSettings::instance()->get_trading())
	{
		_pos->data()._status = LF::psActive;
		Z::report_info("%s -- Trading Active", get_name().c_str());
	}
	else
	{
		_pos->data()._status = LF::psSuspended;
		Z::report_info("%s -- Trading Suspended ", get_name().c_str());
	}

	report_run();
	return true;
}
//======================================================================
void LFStrategy::restore_position()
{
	if(_position_file.length() == 0)
		return;
	std::string st = Z::get_setting("COMMAND:config");
	try
	{
		Z::add_setting("COMMAND:config", _position_file);
		TCSettings::rescan();
	}
	catch(...)
	{
	}
	Z::add_setting("COMMAND:config", st);
}
//======================================================================
void LFStrategy::save_position()
{
	if(_position_file.length() == 0)
		return;
	LFPositionData& pd = _pos->data();
	std::ofstream l_stream(_position_file.c_str());
	if(l_stream.good())
	{
		double p = pd._p_open.p_p();
		double q = pd._p_open._q;
		if(pd._side == LF::s_SELL)
			q = -q;
		l_stream << "LFPosition:open_p" << "\t" << p << std::endl;
		l_stream << "LFPosition:open_q" << "\t" << q << std::endl;
		l_stream << "LFPosition:realized_pnl" << "\t" << pd._realized_pnl << std::endl;
		l_stream << "LFStrategy:version" << "\t" << LEAF_VERSION << std::endl;
		l_stream << "LFStrategy::cqg_account_id" << "\t" << _pos->account() << std::endl;
	}
}
//======================================================================
bool LFStrategy::in_trading_time(const ACE_Time_Value& t_)
{
	TCTime m_time = TCDateTime(t_).get_time();
	if(_no_new_after.as_hms() != 0 && m_time > _no_new_after)
		return false;
	if(_no_new_before.as_hms() != 0 && m_time < _no_new_before)
		return false;
	return true;
}
//======================================================================
void LFStrategy::report_run()
{
	if(_stats.get() != 0 && !BMModel::instance()->is_live())
	{
		if (_stats->_t_data.started())
		{
			_stats->_t_history.push_back(_stats->_t_data);
			_stats->_t_data.reset();
		}
		_stats->report();
		for(LFSignalList::iterator i = _signals.begin(); i != _signals.end(); ++i)
		{
			(*i)->close();
			const LFMatchPtrList& tsrs = (*i)->get_history();
			for(LFMatchPtrList::const_iterator ii = tsrs.begin(); ii != tsrs.end(); ++ii)
			{
				if(in_trading_time((*ii)->_s_t))
					BMModel::instance()->send(new LFMatch(*(*ii)));
			}
		}
		for (size_t i = 0; i < _stats->_t_history.size(); ++i)
		{
			BMModel::instance()->send(new LFTradeStats(_stats->_t_history[i]));
		}


		if(_run_event)
		{
			_run_event->_run_stats = *_stats;
			_run_event->_t = _stats->_t;

			for(LFSignalList::iterator i = _signals.begin(); i != _signals.end(); ++i)
			{
				const LFMatchPtrList& tsrs = (*i)->get_history();
				for(LFMatchPtrList::const_iterator ii = tsrs.begin(); ii != tsrs.end(); ++ii)
				{
					if(in_trading_time((*ii)->_s_t))
						_run_event->_teasers.push_back(*(*ii));
				}
			}
		}
	}
	_stats.reset(new LFRunStats());
}
//=================================================================================
bool lf_compare_momentum_data(LFMomentumData* s1_, LFMomentumData* s2_)
{
	return s1_->_tick_limit_tv < s2_->_tick_limit_tv;
}
//======================================================================
void LFStrategy::set_i_count()
{
	_s._i_count++;
	for (LFMomentumDataPVec::iterator i = _s._m_vec.begin(); i < _s._m_vec.end(); ++i)
	{
		(*i)->_i_count = _s._i_count;
	}

}

//======================================================================
bool LFStrategy::process_missed_tick(const ACE_Time_Value& t_)
{
	std::sort(_s._m_vec.begin(), _s._m_vec.end(), lf_compare_momentum_data);
	for (LFMomentumDataPVec::iterator i = _s._m_vec.begin(); i < _s._m_vec.end(); ++i)
	{
		if ((*i)->_tick_limit_tv != ACE_Time_Value::zero
			&& (*i)->_tick_limit_tv < t_)
		{
			if ((*i)->process_missed_tick(t_))
				run();
			return true;
		}
	}
	return false;

}
//======================================================================
void LFStrategy::process_missed_ticks(const ACE_Time_Value& t_)
{
	while (process_missed_tick(t_));
}
//======================================================================
void LFStrategy::process_l_depth(LFDepthDataPtr* d_)
{
	auto_ptr<LFDepthDataPtr> d(d_);
	const LFDepthData& dd = **d;
	set_i_count();
	process_missed_ticks(dd._t);
	if (_s._l_1.process_depth(dd))
		run();
}

//======================================================================
//======================================================================
void LFStrategy::process_f_depth(LFDepthDataPtr* d_)
{
	auto_ptr<LFDepthDataPtr> d(d_);
	const LFDepthData& dd = **d;
	set_i_count();

	process_missed_ticks(dd._t);
	if (_s._f_1.process_depth(dd))
		run();
}

//======================================================================
void LFStrategy::process_l_trade(LFTradeDataPtr* d_)
{
	auto_ptr<LFTradeDataPtr> d(d_);
	const LFTradeData& dd = **d;
	set_i_count();

	process_missed_ticks(dd._t);
	if (_s._l_1.process_trade(dd))
		run();
}

//======================================================================
void LFStrategy::process_f_trade(LFTradeDataPtr* d_)
{
	auto_ptr<LFTradeDataPtr> d(d_);
	const LFTradeData& dd = **d;
	set_i_count();
	if (BMTT_Shift::instance()->get() == 0)
		BMTT_Shift::instance()->set(dd._t);
	process_missed_ticks(dd._t);
	if (_s._f_1.process_trade(dd))
		run();
}

//======================================================================
void LFStrategy::process_request(LFStrategyRequestPtr* d_)
{
	auto_ptr<LFStrategyRequestPtr> d(d_);
	const LFStrategyRequest& dd = **d;

	LFPositionData& pd = _pos->data();
	if(dd._cancel_id >= 0)
	{
		_pos->cancel_order(dd._cancel_id);
		return;
	}

	//Activate/Suspend
	if(dd._position_status != LF::psUndefined)
	{
		if(dd._position_status != pd._status && dd._position_status == LF::psSuspended)
			_pos->cancel_order(0);
		pd._status = dd._position_status;
	}
	else if(dd._order_type != LF::otUndefined)
	{
		long sub_id = 1;
		if(dd._booking)
			sub_id = -1;
		_pos->new_order(dd._order_side, dd._q, dd._order_type, sub_id, dd._limit_p, dd._stop_p); // as Boss
	}
	else if(dd._q_A_i >= 0)
	{
		pd._q_A_i = dd._q_A_i;
	}
	else if(dd._q_S_i >= 0)
	{
		pd._q_S_i = dd._q_S_i;
	}
	else if(dd._q_P_i >= 0)
	{
		pd._q_P_i = dd._q_P_i;
	}
	else if(dd._q_L_i >= 0)
	{
		if(pd._side != LF::s_UNKNOWN)
		{
			double q = 0;
			if(dd._q_L_i == 0.)
				q = pd._p_remain_q;
			else
				q = std::min(pd._p_remain_q, dd._q_L_i);
			if(q > 0)
			{
				if(dd._booking)
				{
//					_pos->new_order(LFSide::contra(pd._side), q, LF::otMarket, -1);
					_pos->new_order(LFSide::contra(pd._side), q, LF::otLimit, -1, pd._open.p_p());
				}
				else
				{
					_pos->new_order(LFSide::contra(pd._side), q, LF::otMarket, 1);
				}
			}
		}
	}
	else if(dd._st_action != LF::stUNKNOWN && _trading_signal.get() != 0)
	{
		_trading_signal->process_request(dd);
	}
	run();
}
////======================================================================
//======================================================================
void LFStrategy::signal()
{
	LFPositionData& pd = _pos->data();
	for(LFSignalList::iterator i = _signals.begin(); i != _signals.end(); ++i)
	{
		(*i)->update();
	}
	if (_trading_signal.get() != 0)
	{
		pd._action = _trading_signal->get_action();
	}

}
//======================================================================
void LFStrategy::do_profit_loss()
{
	LFPositionData& pd = _pos->data();
	if(pd._side == LF::s_UNKNOWN)
		return;
	// In position
	const LFSide* pside = LFSide::s(pd._side);

	// cut loss
	if(pd._p_remain_q > 0 && _cut_loss > 0)
	{
		double cut_ticks = -_cut_loss/pd._tick_value/pd._p_remain_q;
		if(pd._unrealized_ticks <= cut_ticks + 3)
		{
			// cut loss
			pd._action = LF::paPreCutLoss;
			if(pd._unrealized_ticks <= cut_ticks)
			{
				_s._exit = -pd._p_remain_q* pside->sign();
				_s._max_profit_ticks = 0;
				pd.reset_user_input();
				pd._status = LF::psCutLoss;
				pd._action = LF::paCutLoss;

				return;
			}
		}
	}
	// take profit
	if(pd._p_remain_q > 0 && _s._cur_profit_ticks > 0)
	{
		_s._max_profit_ticks = std::max(_s._max_profit_ticks, pd._unrealized_ticks);
		if(_s._max_profit_ticks >= _s._cur_profit_ticks)
		{
			pd._action = LF::paProfit;
		}
		else if(pd._unrealized_ticks >= (_s._cur_profit_ticks - 3))
		{
			pd._action = LF::paPreProfit;
		}

		if(pd._action == LF::paProfit)
		{
			bool p_exit = false;
			if(_s._f_1.m_sign()*pside->sign() <= 0)
			{
				p_exit = true;
			}
			else
			{
				if((_s._f_1._m - _s._f_1._last_m)*_s._f_1._last_m < 0)
				{
					p_exit = true;
				}
			}
			if(p_exit)
			{
				_s._exit = -pd._q_P* pside->sign();
				_s._cur_profit_ticks = 0;
				_s._max_profit_ticks = 0;
				pd.reset_user_input();
			}
			return;
		}
	}
}
//======================================================================
void LFStrategy::strategy()
{
	LFPositionData& pd = _pos->data();

	do_profit_loss();

	double psign = 0;
	if(pd._side != LF::s_UNKNOWN)
		psign = LFSide::s(pd._side)->sign();

	if(_trading_signal.get() != 0)
	{
		LFTeaserPair& tsr = _trading_signal->get_teaser();
		for(size_t i = 0; i < tsr.size(); ++i)
		{
			if(tsr[i].valid() && !tsr[i]._processed)
			{
				if(tsr[i]._e_v < 0)
				{
					if(pd._p_remain_q > 0 && psign*tsr[i].psign() < 0)
						_s._exit = -psign*std::min(pd._p_remain_q, ::fabs(tsr[i]._e_v));
				}
				else
				{
					if(tsr[i]._e_v > 0)
					{
						_s._fume = -tsr[i].psign()*tsr[i]._e_v;
						_s._max_profit_ticks = 0;
						_s._cur_profit_ticks = _take_profit_ticks;
					}
					if(pd._p_remain_q > 0 && psign*tsr[i].psign() > 0)
						_s._exit = -psign*pd._p_remain_q;
				}

				tsr[i]._fume = _s._fume;
				tsr[i]._exit = _s._exit;
				tsr[i]._processed = true;
				if(tsr[i]._fume != 0 || tsr[i]._exit != 0)
					_s._exec = tsr[i];
			}
		}
	}
}

//======================================================================
bool LFStrategy::set_run_data()
{
	_s._t = _input_time;
	if (_s._l_1._lf_m.get() == 0 || _s._f_1._lf_m.get() == 0)
		return false;
	if (!_s._l_1._lf_m->is_collected() && _leader_on)
		return false;
	if (!_s._f_1._lf_m->is_collected())
		return false;

	_pos->set_market_data(_s._f_1._md);

	return true;
}
//======================================================================
void LFStrategy::run_strategy()
{
	LFPositionData& pd = _pos->data();
	//
	_s._fume = 0;
	_s._exit = 0;
	_s._exec.reset();

	pd._action = LF::paUndefined;
	pd._q_A = 0;
	pd._q_S = 0;
	pd._q_P = 0;
	if(pd._p_remain_q > 0)
	{
		pd._q_S = pd._p_remain_q;
		pd._q_P = pd._p_remain_q;
		if(pd._q_S_i > 0. && pd._q_S_i < pd._p_remain_q)
			pd._q_S = (long)(pd._q_S_i + 0.5);
		if(pd._q_P_i > 0. && pd._q_P_i < pd._p_remain_q)
			pd._q_P = (long)(pd._q_P_i + 0.5);

	}

	signal();
	strategy();

	pd._box_trends = _s._f_1._box_trends;
	pd._trend_side = _s._f_1._trend_side == 0?LF::s_UNKNOWN :_s._f_1._trend_side->value();
	pd._in_trend = _s._f_1._in_trend;
	pd._trend_hard_p = _s._f_1._trend_hard_p;
	pd._trend_soft_p = _s._f_1._trend_soft_p;
	pd._bias_bp = _s._f_1._bias_bp;
	pd._bias_bx = _s._f_1._bias_bx;

	pd.strat_to_market(_pos->get_market_data());

	if (pd._trend_side == LF::s_UNKNOWN)
	{
		pd._signal.clear();
	}
	else
	{
		const LFSide* s = LFSide::s(pd._trend_side);
		std::ostringstream os;
		os << std::setprecision(2) << std::fixed;

		if (pd._in_trend && pd._trend_soft_p != 0)
			os << ((pd._trend_side == LF::s_BUY)?"u":"d") << "_" << pd._trend_soft_p;
		else
			os << ((pd._trend_side == LF::s_BUY) ? "U" : "D") << "_" << pd._trend_hard_p;

		pd._signal = os.str();
	}

	// exiting from position
	if(_s._exit != 0. && (pd._status == LF::psActive || pd._status == LF::psCutLoss))
	{
		if(pd._side != LF::s_UNKNOWN && _s._exit*LFSide::s(pd._side)->sign() < 0)
		{
			double q = ::fabs(_s._exit);
			_pos->new_order(LFSide::contra(pd._side), q, LF::otMarket, 2);
		}
	}
	// entering or extending position
	double q = ::fabs(_s._fume);
	if(q > 0. && pd._status == LF::psActive)
	{
		LF::Side order_side = _s._fume > 0 ?LF::s_BUY:LF::s_SELL;
		//if(pd._side == LFSide::contra(order_side))
		//	q += pd._open._q;
		if(pd._side == LF::s_UNKNOWN || order_side == pd._side)
		{
			//same
			if(pd._p_open._q + q > _position_limit)
			{
				q = _position_limit - pd._p_open._q;
				Z::report_info("LFStrategy %s -- SAME SIDE && LIMIT -- q = %f", TCTimestamp(_input_time).c_str(), q);
			}
		}
		else
		{
			// contra
			if(q - pd._p_remain_q > _position_limit)
			{
				q = _position_limit + pd._p_remain_q;
				Z::report_info("LFStrategy %s -- CONTRA SIDE && LIMIT -- q = %f",
					TCTimestamp(_input_time).c_str(), q);
			}
		}

		if(!in_trading_time(_input_time)
			&& 	pd._p_remain_q == 0)
		{
			Z::report_info("LFStrategy %s -- NO NEW POS TIME -- q = %f REFUSED", TCTimestamp(_input_time).c_str(), q);
			q = 0;
		}

		if(q > 0)
		{
			_pos->new_order(order_side, q, LF::otMarket, 2);
		}
	}
	_stats->update(pd);
	BMModel::instance()->send(new LFStrategyData(_s));
	_s.clear_just_flags();
}
//======================================================================
bool LFStrategy::run()
{
	LFPositionData& pd = _pos->data();
	if(_suspend_at != ACE_Time_Value::zero && _input_time >= _suspend_at)
	{
		pd._status = LF::psSuspended;
		Z::report_info("LFStrategy %s -- Trading Suspended ", get_name().c_str());
		_suspend_at = ACE_Time_Value::zero;
	}
	if(set_run_data())
		run_strategy();

	if(!pd.is_position_equal(_last_pd))
		save_position();

	if (!pd.is_strategy_equal(_last_pd) && !_rerun)
	{
		pd._t = _input_time;
		BMModel::instance()->send(new LFPositionData(pd));
	}
	_last_pd = pd;

	return true;
}
//======================================================================
