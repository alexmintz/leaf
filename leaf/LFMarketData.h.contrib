/*
*
*	© Copyright 2011 by TAF Co. All rights reserved.
*
*/

#ifndef LF_MARKET_DATA_H
#define LF_MARKET_DATA_H

#include "znet/ZNet.h"
//#include "znet/BMTS_Properties.h"
#include "znet/BMModel.h"
#include "znet/TCPQP.h"
#include "leaf/LEAF_Export.h"

//======================================================================
class LEAF_Export LFSecurityMaster
{	
public:
	LFSecurityMaster();
	~LFSecurityMaster(){}

	static LFSecurityMaster* instance();	

	typedef std::map<std::string, long> LFSecurityMap;

	long strategy_id(const std::string& instr_ = "");
	long get_strategy_id(const std::string& instr_, long strategy_number_) const;

	const LFSecurityMap&			get_map() const { return _m;}
	const std::vector<std::string>& get_ast() const { return _ast;}
	const std::vector<std::string>& get_und() const { return _und;}
	const std::vector<std::string>& get_exp() const { return _exp;}

	bool set_cqg(std::string& c, const std::string& front_);
	
	// Get Front Month for the date
	std::string get_instr(const std::string& under_, const TCDate& date_);

	std::string get_cle(const TCDate& tv_);
	std::string get_dxe(const TCDate& tv_);
	std::string get_smp(const TCDate& tv_);
	std::string get_brn(const TCDate& tv_);
	std::string get_rfe(const TCDate& tv_);

	std::vector<std::string> get_cls(const TCDate& tv_);

	std::string get_cl(const TCDate& tv_);
	std::string get_sp(const TCDate& tv_);
	std::string get_br(const TCDate& tv_);

	double get_tick_size() const { return _tick_size;}
	double get_tick_value() const { return _tick_value;}
	double get_price_factor() const { return _pf;}

private:
//	bool cme_front(const std::string&, const TCDate& tv_);
//	bool cle_front(const std::string&, const ACE_Time_Value& tv_);
//	bool smp_front(const std::string&, const ACE_Time_Value& tv_);

	bool set_cqg_cle(std::string& s_, const std::string& front_);
	bool set_cqg_cls(std::string& s_, const std::string& front_);
	bool set_cqg_smp(std::string& s_);
	bool set_cqg_brn(std::string& s_);

	std::string get_cle(const ACE_Time_Value& tv_);
	std::string get_dxe(const ACE_Time_Value& tv_);

	std::string get_cl(const ACE_Time_Value& tv_);
	std::string get_sp(const ACE_Time_Value& tv_);

	size_t cl_future_month(const char m_) const;

	unsigned char cl_future_switch(const TCDate& dt_);
	unsigned char dx_future_switch(const TCDate& dt_);
	unsigned char br_future_switch(const TCDate& dt_);
	unsigned char rf_future_switch(const TCDate& dt_);

	unsigned char smp_exp_day(ACE_UINT16 y_, unsigned char	m_);

	char future_char(const unsigned char m_) const;

	long			_id;
	LFSecurityMap	_m;
	std::vector<std::string> _ast;
	std::vector<std::string> _und;
	std::vector<std::string> _exp;
	tc_vector<int>			 _spm; //spread months counting fromthe front
	std::string				_expiration_months;
	std::string				_cle_override;
	std::string				_dxe_override;
	std::string				_smp_override;
	std::string				_brn_override;

	double					_tick_size;
	double					_tick_value;
	double					_pf;
};
//======================================================================
//======================================================================

namespace LF
{
	enum OrderType
	{
		otUndefined = 0, otMarket = 1, otLimit = 2, otStop = 3, otStopLimit = 4
	};
	enum Side
	{
		s_UNKNOWN = 0, s_BUY = 1, s_SELL = 2
	};

	LEAF_Export std::string side_to_str(Side v_);
	LEAF_Export LF::Side str_to_side(const std::string& v_s_);

	enum OrderStatus
	{
		osNotSent = 0, osInClient = 1, osInTransit = 2, osRejectGW = 3, 
		osInOrderBook = 4, osInTransitTimeout = 5, osRejectFCM = 6, osExpired = 7, 
		osInCancel = 8, osInModify = 9, osCanceled = 10, osFilled = 11, 
		osParked = 12, osDisconnected = 13, osContingent = 14, osActiveAt = 16 
	};
	enum FillStatus
	{
		fsNormal = 0, fsCanceled = 1, fsModified = 2, fsBusted = 3 
	};

	LEAF_Export std::string make_strategy_key(long strategy_id_, const std::string& instr_key_);
	LEAF_Export std::string make_sub_strategy_key(long strategy_id_, long sub_strategy_id_, const std::string& instr_key_);
	LEAF_Export std::string make_strategy_key(const std::string& strategy_id_, const std::string& instr_key_);
	LEAF_Export std::string make_sub_strategy_key(const std::string& strategy_id_, long sub_strategy_id_, const std::string& instr_key_);

	enum PositionStatus
	{
		psUndefined = 0, psActive = 1, psSuspended = 2, psCutLoss = 3
	};
	enum PositionAction
	{
		paUndefined = 0, 

		paSharp	= 10,
		paPreEnter = 11,
		paEnter = 20, 
		
		paPreAverage = 30, 
		paAverage = 40, 
		
		paPreCutLoss = 50,
		paCutLoss = 60,

		paPreProfit = 70, 
		paProfit = 80,

		paPreTrendEnd = 90, 
		paTrendEnd = 100
	};
	enum StrategyType
	{
		stUNKNOWN = 0, stSHARP = 1, stTNT = 2
	};
};


//======================================================================
template <int DEPTH_SIZE_T>
struct LEAF_Export LFDepthData_T : public Z::Point
{
	enum 
	{	
		DEPTH_SIZE = DEPTH_SIZE_T,
		DEPTH_FILE_SIZE = 1
	};

	LFDepthData_T() :
		_cqg_InstrumentID(-1),
		_tick_size(0),
		_tick_value(0)
	{}
	virtual ~LFDepthData_T(){}

	virtual std::string get_key() const { return _instr_key; }
	virtual void set_key(const std::string& k_) {_instr_key = k_;}


	LEAF_Export friend bool operator<<(ACE_OutputCDR& strm, const LFDepthData_T<DEPTH_SIZE>& d_)
	{
		if (!d_.to_cdr(strm))
			return false;
		if (!(strm << d_._instr_key))
			return false;
		if (!(strm << d_._cqg_InstrumentID))
			return false;
		if (!(strm << d_._tick_size))
			return false;
		if (!(strm << d_._tick_value))
			return false;

		for (size_t i = 0; i < DEPTH_SIZE; ++i)
		{
			if (!(strm << d_._ask[i]))
				return false;
		}
		for (size_t i = 0; i < DEPTH_SIZE; ++i)
		{
			if (!(strm << d_._bid[i]))
				return false;
		}
		return true;
	}
	LEAF_Export friend bool operator>>(ACE_InputCDR& strm, LFDepthData_T<DEPTH_SIZE>& d_)
	{
		if (!d_.from_cdr(strm))
			return false;
		if (!(strm >> d_._instr_key))
			return false;
		if (!(strm >> d_._cqg_InstrumentID))
			return false;
		if (!(strm >> d_._tick_size))
			return false;
		if (!(strm >> d_._tick_value))
			return false;

		for (size_t i = 0; i < DEPTH_SIZE; ++i)
		{
			if (!(strm >> d_._ask[i]))
				return false;
		}
		for (size_t i = 0; i < DEPTH_SIZE; ++i)
		{
			if (!(strm >> d_._bid[i]))
				return false;
		}
		return true;
	}
	///Writes data in csv format
	LEAF_Export friend std::ostream& operator<<(std::ostream& os, const LFDepthData_T<DEPTH_SIZE>& d_)
	{
		d_.to_stream(os);

		os << "," << d_._instr_key
			<< "," << d_._cqg_InstrumentID
			<< "," << d_._tick_size
			<< "," << d_._tick_value;

		// write only zero level
		for (size_t i = 0; i < DEPTH_SIZE; ++i)
		{
			if (d_._ask[i].good())
			{
				os << "," << d_._ask[i].p_p() << "," << d_._ask[i]._q;
				break;
			}
		}
		for (size_t i = 0; i < DEPTH_SIZE; ++i)
		{
			if (d_._bid[i].good())
			{
				os << "," << d_._bid[i].p_p() << "," << d_._bid[i]._q;
				break;
			}
		}
		return os;
	}
	
	///Reads data in csv format
	void from_csv_vec(const std::vector<const char*>& v_)
	{
		Z::Point::from_csv_vec(v_);

		int ind = Z::Point::TIME_FIELDS;
		_instr_key = v_[ind++];
		_cqg_InstrumentID = atol(v_[ind++]);
		_tick_size = atof(v_[ind++]);
		_tick_value = atof(v_[ind++]);

		size_t CSV_DEPTH = (v_.size() - ind) / 4;

		for (size_t i = 0; i < CSV_DEPTH; ++i)
		{
			if (i < DEPTH_SIZE)
				_ask[i].reset(atof(v_[ind]), atof(v_[ind + 1]));
			ind += 2;
		}
		for (size_t i = 0; i < CSV_DEPTH; ++i)
		{
			if (i < DEPTH_SIZE)
				_bid[i].reset(atof(v_[ind]), atof(v_[ind + 1]));
			ind += 2;
		}
	}

	std::string as_string() const
	{
		std::ostringstream os;
		os << TCTimestamp(_t).c_str() << " " << _instr_key
			<< "(" << _cqg_InstrumentID << ") ";
		os << "{ ";
		for (size_t i = 0; i < DEPTH_SIZE; ++i)
			os << _bid[i] << " ";
		os << "}{ ";
		for (size_t i = 0; i < DEPTH_SIZE; ++i)
			os << _ask[i] << " ";
		os << "}";
		return os.str();
	}
	
	bool valid() const { return _tick_size != 0; }

	std::string _instr_key;
	long		_cqg_InstrumentID;
	double		_tick_size;
	double		_tick_value;

	TC_pqp _ask[DEPTH_SIZE];
	TC_pqp _bid[DEPTH_SIZE];

	static const char* header()
	{
		return ",S_KEY,CQG_ID,TICK_S,TICK_V,A0P,A0Q,B0P,B0Q";
	}
};
typedef LFDepthData_T<1> LFDepthData;
typedef LFDepthData_T<10> LFDepthDataReader;

typedef Z::smart_ptr<LFDepthData> LFDepthDataPtr;
typedef Z::smart_ptr<LFDepthDataReader> LFDepthDataReaderPtr;

Z_EVENT_DECLARE_MODEL(LEAF, LFDepthDataReader)
Z_EVENT_DECLARE_MODEL(LEAF, LFDepthData)

//======================================================================
struct LEAF_Export LFTradeData  : public Z::Point
{
	LFTradeData();
	virtual ~LFTradeData();

	virtual std::string get_key() const { return _instr_key; }
	virtual void set_key(const std::string& k_) {_instr_key = k_;}

	LEAF_Export friend bool operator<<(ACE_OutputCDR& strm, const LFTradeData& d_);
	LEAF_Export friend bool operator>>(ACE_InputCDR& strm, LFTradeData& d_);
	///Writes data in csv format
	LEAF_Export friend std::ostream& operator<<(std::ostream& os, const LFTradeData& d_);
	///Reads data in csv format
	void from_csv_vec(const std::vector<const char*>& v_);

	std::string as_string() const;

	std::string _instr_key;
	long		_cqg_InstrumentID;

	TC_pqp		_trade;
	double		_p_vol;  // total volume on that price level

	static const char* header();
};
typedef Z::smart_ptr<LFTradeData> LFTradeDataPtr;

Z_EVENT_DECLARE_MODEL(LEAF, LFTradeData)

//======================================================================
struct LEAF_Export LFVWAPData : public Z::Point
{
	LFVWAPData(	const std::string& instr_key_, 
				const ACE_Time_Value tv_, 
				double vwap_);
	LFVWAPData();
	virtual ~LFVWAPData();

	virtual std::string get_key() const { return _instr_key; }
	virtual void set_key(const std::string& k_) { _instr_key = k_; }

	LEAF_Export friend bool operator<<(ACE_OutputCDR& strm, const LFVWAPData& d_);
	LEAF_Export friend bool operator>>(ACE_InputCDR& strm, LFVWAPData& d_);
	///Writes data in csv format
	LEAF_Export friend std::ostream& operator<<(std::ostream& os, const LFVWAPData& d_);
	///Reads data in csv format
	void from_csv_vec(const std::vector<const char*>& v_);

	std::string as_string() const;

	std::string _instr_key;
	long		_cqg_InstrumentID;

	double		_vwap;  

	static const char* header();
};
typedef Z::smart_ptr<LFVWAPData> LFVWAPDataPtr;

Z_EVENT_DECLARE_MODEL(LEAF, LFVWAPData)
//======================================================================

#endif /*LF_MARKET_DATA_H*/
